from __future__ import annotations
from typing import TYPE_CHECKING, Any
import os
import re
import json
import time
import random
import string
import logging
from pathlib import Path

from telebot.types import Message  
from telebot import Bot

if TYPE_CHECKING:
    from cardinal import Cardinal

from FunPayAPI.account import Account
from FunPayAPI.types import UserProfile, LotShortcut, LotPage

NAME = "–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
VERSION = "1.0"
DESCRIPTION = "–ö–æ–ø–∏—Ä—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –ª–æ—Ç—ã (RU+EN) —Å —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
CREDITS = "@exfador"
UUID = "96b3d870-4bda-4025-9d46-d14a460ade30"
SETTINGS_PAGE = False

logger = logging.getLogger("FPC.auto_copy")

STATE_WAIT_LINK = "AC_WAIT_LINK"
user_data: dict[int, dict[str, Any]] = {}

def random_filename(username: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –≤–∏–¥–∞ {username}_{timestamp}_{rnd}.json
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∏–º—è —Ñ–∞–π–ª–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    t = int(time.time())
    r = "".join(random.choices(string.ascii_lowercase + string.digits, k=5))
    return f"{username}_{t}_{r}.json"

def extract_user_id(link: str) -> int | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏ FunPay.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        link (str): –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å FunPay
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        int | None: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    pattern = re.compile(r"https?://funpay\.com/users/(\d+)/?")
    m = pattern.search(link)
    if m:
        return int(m.group(1))
    return None

def set_locale(acc: Account, locale: str) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        acc (Account): –ê–∫–∫–∞—É–Ω—Ç FunPay
        locale (str): –õ–æ–∫–∞–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    acc.locale = locale
    acc.get()

def build_json_for_lot(acc: Account, lot: LotShortcut) -> dict[str, str]:
    """
    –°—Ç—Ä–æ–∏—Ç JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ª–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        acc (Account): –ê–∫–∫–∞—É–Ω—Ç FunPay
        lot (LotShortcut): –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict[str, str]: JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ—Ç–∞
    """
    set_locale(acc, "ru")
    short_ru, desc_ru = "No RU short", "No RU full"
    try:
        pr = acc.get_lot_page(lot.id, locale="ru")
        short_ru = pr.short_description or lot.description or "No RU short"
        desc_ru = pr.full_description or "No RU full"
    except Exception as e:
        logger.warning(f"get_lot_page RU error for lot {lot.id}: {e}")

    set_locale(acc, "en")
    short_en, desc_en = "No EN short", "No EN full"
    try:
        pe = acc.get_lot_page(lot.id, locale="en")
        short_en = pe.short_description or "No EN short"
        desc_en = pe.full_description or "No EN full"
    except Exception as e:
        logger.warning(f"get_lot_page EN error for lot {lot.id}: {e}")

    set_locale(acc, "ru")

    price_ = lot.price or 0.0
    price_str = f"{price_:.6f}"
    node_id = lot.subcategory.id if lot.subcategory else 0
    sc_name_ru = lot.subcategory.name if lot.subcategory else "???"

    return {
        "query": "",
        "form_created_at": str(int(time.time())),
        "node_id": str(node_id),
        "location": "",
        "deleted": "",
        "fields[summary][ru]": short_ru,
        "fields[summary][en]": short_en,
        "fields[images]": "",
        "price": price_str,
        "amount": "999999",
        "active": "on",
        "fields[desc][ru]": desc_ru,
        "fields[desc][en]": desc_en,
        "fields[payment_msg][ru]": "",
        "fields[payment_msg][en]": "",
        "fields[type]": sc_name_ru
    }

def export_to_json(bot: Bot, chat_id: int, data: list[dict[str, str]], username: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data (list[dict[str, str]]): –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    """
    if not data:
        bot.send_message(chat_id, "‚ùó –ù–µ—Ç –ª–æ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫).")
        return
    
    filename = random_filename(username)
    cache_dir = Path("storage") / "cache"
    cache_dir.mkdir(parents=True, exist_ok=True)
    file_path = cache_dir / filename

    try:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ JSON –≤ —Ñ–∞–π–ª {file_path}: {e}")
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return

    try:
        with open(file_path, "rb") as f:
            bot.send_document(chat_id, f, caption=f"‚úÖ –í—ã–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ª–æ—Ç(–æ–≤).")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            file_path.unlink()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

def cmd_steal_lots(m: Message, cardinal: Cardinal) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /steal_lots –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        m (Message): Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
        cardinal (Cardinal): –≠–∫–∑–µ–º–ø–ª—è—Ä Cardinal
    """
    bot = cardinal.telegram.bot
    chat_id = m.chat.id
    user_data[chat_id] = {"step": STATE_WAIT_LINK}
    bot.send_message(
        chat_id,
        "üîé –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å FunPay, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: https://funpay.com/users/11506286/\n\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞."
    )
    logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")

def cmd_cancel(m: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel –∏ –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        m (Message): Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    bot = m.bot
    chat_id = m.chat.id
    if chat_id in user_data:
        user_data.pop(chat_id, None)
        bot.send_message(chat_id, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ—Å—Å.")
    else:
        bot.send_message(chat_id, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

def handle_text(m: Message, cardinal: Cardinal) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        m (Message): Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
        cardinal (Cardinal): –≠–∫–∑–µ–º–ø–ª—è—Ä Cardinal
    """
    bot = cardinal.telegram.bot
    chat_id = m.chat.id

    if chat_id not in user_data:
        return

    step = user_data[chat_id]["step"]
    if step == STATE_WAIT_LINK:
        link_ = m.text.strip()
        user_id = extract_user_id(link_)
        if not user_id:
            bot.send_message(chat_id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏. /cancel ‚Äî –æ—Ç–º–µ–Ω–∞.")
            logger.warning(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É: {link_}")
            user_data.pop(chat_id, None)
            return

        try:
            set_locale(cardinal.account, "ru")
            profile = cardinal.account.get_user(user_id)
            logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—á–∞—Ç {chat_id}).")
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ get_user({user_id}): {e}")
            logger.error(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –û—à–∏–±–∫–∞ get_user({user_id}) –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            user_data.pop(chat_id, None)
            return

        lots = list(profile.get_lots())
        logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–∞–π–¥–µ–Ω–æ {len(lots)} –ª–æ—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—á–∞—Ç {chat_id}).")
        if not lots:
            bot.send_message(chat_id, "üôÅ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤.")
            logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤ (—á–∞—Ç {chat_id}).")
            user_data.pop(chat_id, None)
            return

        bot.send_message(chat_id, f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(lots)} –ª–æ—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        out_list = []
        
        for i, lot in enumerate(lots, 1):
            logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–æ—Ç {lot.id} ({i}/{len(lots)})...")

            # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            delay = random.uniform(5, 15)
            time.sleep(delay)

            try:
                out_list.append(build_json_for_lot(cardinal.account, lot))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–∞ {lot.id}: {e}")

        export_to_json(bot, chat_id, out_list, profile.username)
        logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–≥—Ä—É–∑–∏–ª –≤—Å–µ –ª–æ—Ç—ã.")
        user_data.pop(chat_id, None)

def pingtest_cmd(m: Message, cardinal: Cardinal) -> None:
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        m (Message): Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
        cardinal (Cardinal): –≠–∫–∑–µ–º–ø–ª—è—Ä Cardinal
    """
    bot = cardinal.telegram.bot
    chat_id = m.chat.id
    bot.send_message(chat_id, "üèì Pong!")
    logger.info(f"[–ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–ø–æ–ª–Ω–∏–ª /pingtest.")

def init_plugin(cardinal: Cardinal, *args: Any) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        cardinal (Cardinal): –≠–∫–∑–µ–º–ø–ª—è—Ä Cardinal
        *args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    """
    bot = cardinal.telegram.bot

    cardinal.add_telegram_commands(UUID, [
        ("steal_lots", "ü§ñ –ê–≤—Ç–æ-–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–æ–≤ (RU+EN)", True),
        ("cancel", "üö´ –û—Ç–º–µ–Ω–∞", True),
    ])

    @bot.message_handler(commands=["steal_lots"])
    def steal_cmd(m: Message) -> None:
        cmd_steal_lots(m, cardinal)

    @bot.message_handler(commands=["cancel"])
    def cancel_cmd(m: Message) -> None:
        cmd_cancel(m)

    @bot.message_handler(content_types=["text"])
    def text_msgs(m: Message) -> None:
        handle_text(m, cardinal)

BIND_TO_PRE_INIT = [init_plugin]
BIND_TO_DELETE = None
